#!/bin/bash

# Set the path to the database
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DATABASE="$SCRIPT_DIR/mydatabase.db"

# Ensure the database file exists
if [ ! -f "$DATABASE" ]; then
    sqlite3 "$DATABASE" "CREATE TABLE IF NOT EXISTS quotes (id INTEGER PRIMARY KEY, quote TEXT);
                          CREATE TABLE IF NOT EXISTS todos (id INTEGER PRIMARY KEY, task TEXT, done BOOLEAN);"
fi

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

function show_help {
    echo "Usage: quote_todo_manager [option] [arguments...]"
    echo ""
    echo "Options:"
    echo "  -a, --add-quote QUOTE...     Add one or more quotes"
    echo "  -v, --view-quotes            View all quotes"
    echo "  -d, --delete-quote ID...     Delete one or more quotes by ID"
    echo "  -t, --add-todo TASK...       Add one or more to-dos"
    echo "  -l, --view-todos             View all to-dos"
    echo "  -r, --delete-todo ID...      Delete one or more to-dos by ID"
    echo "  -m, --mark-done ID           Mark a to-do as done by ID"
    echo "  -h, --help                   Show this help message"
}

function add_quote {
    local quotes=("$@")
    if [ ${#quotes[@]} -eq 0 ]; then
        echo "Error: No quote provided."
        exit 1
    fi
    for quote in "${quotes[@]}"; do
        sqlite3 "$DATABASE" "INSERT INTO quotes (quote) VALUES ('$quote');"
        echo "Quote added: $quote"
    done
}

function view_quotes {
    echo -e "${BLUE}Quotes:${NC}"
    echo "---------------------------------------------"
    printf "%-5s | %-s\n" "ID" "Quote"
    echo "---------------------------------------------"
    sqlite3 "$DATABASE" "SELECT id, quote FROM quotes ORDER BY id;" | while IFS="|" read -r id quote; do
        printf "%-5s | %-s\n" "$id" "$quote"
    done
    echo "---------------------------------------------"
}

function delete_quote {
    local ids=("$@")
    if [ ${#ids[@]} -eq 0 ]; then
        echo "Error: No quote ID provided."
        exit 1
    fi
    for id in "${ids[@]}"; do
        if ! [[ "$id" =~ ^[0-9]+$ ]]; then
            echo "Error: Quote ID must be a number."
            exit 1
        fi
        sqlite3 "$DATABASE" "DELETE FROM quotes WHERE id = $id;"
        echo "Quote $id deleted"
    done
    # Reassign IDs to keep them consecutive
    sqlite3 "$DATABASE" "WITH RECURSIVE temp AS (
                              SELECT id, quote, ROW_NUMBER() OVER (ORDER BY id) AS new_id
                              FROM quotes
                          )
                          UPDATE quotes
                          SET id = (SELECT new_id FROM temp WHERE quotes.id = temp.id);"
}

function add_todo {
    local tasks=("$@")
    if [ ${#tasks[@]} -eq 0 ]; then
        echo "Error: No task provided."
        exit 1
    fi
    for task in "${tasks[@]}"; do
        sqlite3 "$DATABASE" "INSERT INTO todos (task, done) VALUES ('$task', 0);"
        echo "To-do added: $task"
    done
}

function view_todos {
    echo -e "${GREEN}To-dos:${NC}"
    echo "-----------------------------------------------------------"
    printf "%-5s | %-50s | %-6s\n" "ID" "Task" "Status"
    echo "-----------------------------------------------------------"
    sqlite3 "$DATABASE" "SELECT id, task, done FROM todos ORDER BY id;" | while IFS="|" read -r id task done; do
        status="pending"
        [ "$done" -eq 1 ] && status="done"
        printf "%-5s | %-50s | %-6s\n" "$id" "$task" "$status"
    done
    echo "-----------------------------------------------------------"
}

function delete_todo {
    local ids=("$@")
    if [ ${#ids[@]} -eq 0 ]; then
        echo "Error: No to-do ID provided."
        exit 1
    fi
    for id in "${ids[@]}"]; do
        if ! [[ "$id" =~ ^[0-9]+$ ]]; then
            echo "Error: To-do ID must be a number."
            exit 1
        fi
        sqlite3 "$DATABASE" "DELETE FROM todos WHERE id = $id;"
        echo "To-do $id deleted"
    done
    # Reassign IDs to keep them consecutive
    sqlite3 "$DATABASE" "WITH RECURSIVE temp AS (
                              SELECT id, task, done, ROW_NUMBER() OVER (ORDER BY id) AS new_id
                              FROM todos
                          )
                          UPDATE todos
                          SET id = (SELECT new_id FROM temp WHERE todos.id = temp.id);"
}

function mark_done {
    local id="$1"
    if ! [[ "$id" =~ ^[0-9]+$ ]]; then
        echo "Error: To-do ID must be a number."
        exit 1
    fi
    sqlite3 "$DATABASE" "UPDATE todos SET done = 1 WHERE id = $id;"
    echo "To-do $id marked as done"
}

case "$1" in
    -a|--add-quote)
        shift
        add_quote "$@"
        ;;
    -v|--view-quotes)
        view_quotes
        ;;
    -d|--delete-quote)
        shift
        delete_quote "$@"
        ;;
    -t|--add-todo)
        shift
        add_todo "$@"
        ;;
    -l|--view-todos)
        view_todos
        ;;
    -r|--delete-todo)
        shift
        delete_todo "$@"
        ;;
    -m|--mark-done)
        if [ -z "$2" ]; then
            echo "Error: No to-do ID provided."
            show_help
            exit 1
        fi
        mark_done "$2"
        ;;
    -h|--help|*)
        show_help
        ;;
esac

